
[gcode_macro T0]
gcode:
    SET_GCODE_OFFSET X=-16                     # Account for different X offset
    ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro T1]
gcode:
    SET_GCODE_OFFSET X=16                      # Account for different X offset
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

[gcode_macro START_PRINT]
description: Perform before printing
gcode:
  M117 Starting print

  ##### prepare variables: #####
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set X_MIN = printer.toolhead.axis_minimum.x %}
  {% set X_MAX = printer.toolhead.axis_maximum.x %}
  {% set TO_X = 0 %}
  {% set TO_Y = printer.toolhead.axis_minimum.y + 10 %}
  
  M140 S{BED_TEMP}                              # start bed heating and continue
  
  G90                                           # use absolute positioning for the XYZ axes

  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28                                         # home the printer if necessary
  {% endif %}

  {% if printer.toolhead.extruder == "extruder" %}
    {% set TO_X = X_MAX - printer.gcode_move.homing_origin.x %}
  {% elif printer.toolhead.extruder == "extruder1" %}
    {% set TO_X = X_MIN - printer.gcode_move.homing_origin.x %}
  {% endif %}
  G1 X{TO_X} Y{TO_Y} Z2.0                       # move nozzle to corner so it doesnt ooze on the bed, while centering Y and moving the bed and extruder towards eachother already
  
  {% if printer.heater_bed.temperature < BED_TEMP|float*0.85 %}
    M190 S{BED_TEMP|float*0.85}                 # wait till 0.85 of bed temp is reached, then continue
  {% endif %}
  
  M140 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  M190 S{BED_TEMP}
  
  PRIME_LINE                                    # prime line to start printing with a clean nozzle

[gcode_macro END_PRINT]
description: Perform when done printing
gcode:
  M117 Done printing :)

  ##### prepare variables: #####
  {% set X_MIN = printer.toolhead.axis_minimum.x %}
  {% set X_MAX = printer.toolhead.axis_maximum.x %}
  {% set Y_MIN = printer.toolhead.axis_minimum.y %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y %}
  {% set Z_MAX = printer.toolhead.axis_maximum.z %}
  {% set TO_X = 0 %}
  
  M104 S0                                       # turn off extruder heater
  M140 S0                                       # turn off bed heater

  G90                                           # use absolute positioning for the XYZ axes
  {% if printer.toolhead.extruder == "extruder" %}
    {% set TO_X = X_MAX - printer.gcode_move.homing_origin.x %}
  {% elif printer.toolhead.extruder == "extruder1" %}
    {% set TO_X = X_MIN - printer.gcode_move.homing_origin.x %}
  {% endif %}
  G1 X{TO_X} Y{Y_MAX} Z{Z_MAX}                  # move extruder away from bed as far as possible and move nozzle to corner so it doesnt ooze on the bed

[gcode_macro PRIME_LINE]
description: Clean the nozzle (before printing)
gcode:
  ##### prepare variables: #####
  {% set FROM_X = 0 %}
  {% set TO_X = 0 %}
  {% set FROM_Y_TO_Y = printer.toolhead.axis_minimum.y + 10 %}

  G92 E0                                        # reset Extruder
  {% if printer.toolhead.extruder == "extruder" %}
    {% set FROM_X = printer.toolhead.axis_maximum.x - printer.gcode_move.homing_origin.x - 30 %}
    {% set TO_X = printer.toolhead.axis_maximum.x - printer.gcode_move.homing_origin.x - 80 %}
  {% elif printer.toolhead.extruder == "extruder1" %}
    {% set FROM_X = printer.toolhead.axis_minimum.x - printer.gcode_move.homing_origin.x + 30 %}
    {% set TO_X = printer.toolhead.axis_minimum.x - printer.gcode_move.homing_origin.x + 80 %}
  {% endif %}
  G1 X{FROM_X} Y{FROM_Y_TO_Y} Z0.1              # move to start position
  G1 E5                                         # start spitting goo
  G1 X{TO_X} Y{FROM_Y_TO_Y} Z0.1  E7            # draw line
  G92 E0                                        # reset extruder

###
# CANCEL
#
# Cancel print
###
[gcode_macro CANCEL_PRINT]
rename_existing: _KLIPPER_CANCEL_PRINT
variable_park: True
gcode:

    # Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == "false" and park|lower == "true"%}
      _TOOLHEAD_PARK
    {% endif %}

    M107
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    # Set LED to red
    LED_RGB RGB="r"

    _KLIPPER_CANCEL_PRINT

###
# PAUSE
#
# Pause printer
###
[gcode_macro PAUSE]
rename_existing: _KLIPPER_PAUSE
gcode:

    SAVE_GCODE_STATE NAME=PAUSE_state

    _KLIPPER_PAUSE

    # Retract, move Z then park head
    _TOOLHEAD_PARK

    # Set LED to purple
    LED_RGB RGB="rb"


###
# RESUME
#
# Resume print
###
[gcode_macro RESUME]
rename_existing: _KLIPPER_RESUME
gcode:
    # Prepare extruder to resume
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK'].extrude %}
    {% if printer[printer.toolhead.extruder].can_extrude|lower == "true" %}
      M83
      G1 E{extrude} F2000
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    # Set LED back to white    
    LED_RGB RGB="rgb"

    _KLIPPER_RESUME {rawparams}

###
# _TOOLHEAD_PARK
#
# Parks head on a Pause or Cancel
###
[gcode_macro _TOOLHEAD_PARK]
variable_extrude: 1.0
gcode:
    
    {% set maximum_z = printer.toolhead.axis_maximum.z|float %}
    {% set current_z = printer.toolhead.position.z|float %}
    {% set raise_z = 5.0 %}
    {% set move_z = raise_z if current_z < (maximum_z - raise_z) else maximum_z - current_z %}

    # Only retract if the extruder can
    {% if printer[printer.toolhead.extruder].can_extrude|lower == "true" %}
      M83
      G1 E-{extrude} F2000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}

    # Can only move from a known point
    {% if printer.toolhead.homed_axes == "xyz" %}
      G91
      G1 Z{raise_z if current_z < (maximum_z - raise_z) else maximum_z - current_z} F1000
      G90
      G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}


[gcode_macro LED_RGB]
gcode:
    {% set rgb=params.RGB|default("")|upper %}

    {% set r = 1 if "R" in rgb else 0 %}
    {% set g = 1 if "G" in rgb else 0 %}
    {% set b = 1 if "B" in rgb else 0 %}

    SET_LED LED=led_strip RED={r} GREEN={g} BLUE={b}